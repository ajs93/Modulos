/**
 * @file RingBuffer.c
 * @brief Implementaciones para el buffer circular
 * @author Augusto Santini
 * @date 3/2020
 * @version 1.0
 */

#include <RingBuffer.h>

/**
 * @brief Inicializar buffer circular
 * @param[in] rb Puntero al buffer circular a inicializar
 */
void RingBufferInit(RingBuffer *rb)
{
	*((unsigned int *) &rb->in_idx) = 0;
	*((unsigned int *) &rb->out_idx) = 0;
	*((unsigned int *) &rb->current_elements_amount) = 0;
}

/**
 * @brief Obtener elemento de un buffer circular
 * @param[in] rb Puntero al buffer circular del cual obtener el elemento
 * @param[in] data Puntero a donde guardar el dato
 * @return En caso de no haber elementos disponibles, devuelve -1, en caso de exito devuelve 0
 */
int RingBufferPopElement(RingBuffer *rb, void *data)
{
	if(RingBufferGetAvailableElements(rb) > 0)
	{
		void *e = (void *) (rb->memory_buffer + (rb->out_idx * rb->data_size));
		void *end = e + rb->data_size;

		while(e < end)
			*((char *) data++) = *((char *) e++);

		*((unsigned int *) &rb->out_idx) = (rb->out_idx + 1) % rb->element_amount;
		()*((unsigned int *) &rb->current_elements_amount))--;
	}
	else
	{
		return -1;
	}

	return 0;
}

/**
 * @brief Colocar elemento en un buffer circular
 * @param[in] rb Puntero al buffer circular en el cual colocar el elemento
 * @param[in] data Puntero al dato a colocar
 * @return En caso de no haber lugar disponible, devuelve -1, en caso de exito devuelve 0
 */
int RingBufferPutElement(RingBuffer *rb, const void *data)
{
	if(RingBufferGetFreeElements(rb) > 0)
	{
		char *e = (char *) (rb->memory_buffer + (rb->in_idx * rb->data_size));
		char *end = e + rb->data_size;

		while(e < end)
			*e++ = *((char *) data++);

		*((unsigned int *) &rb->in_idx) = (rb->in_idx + 1) % rb->element_amount;
		*((unsigned int *) &rb->current_elements_amount)++;
	}
	else
	{
		return -1;
	}

	return 0;
}

/**
 * @brief Obtener cantidad de elementos actuales en el buffer circular
 * @param[in] rb Puntero al bufer circular a consultar
 * @return Cantidad de elementos que hay en el buffer circular
 */
unsigned int RingBufferGetAvailableElements(const RingBuffer *rb)
{
	return (rb->element_amount - rb->current_elements_amount);
}

/**
 * @brief Obtener cantidad de lugares disponibles en el buffer circular
 * @param[in] rb Puntero al buffer circular a consultar
 * @return Cantidad de lugares libres en el buffer circular
 */
unsigned int RingBufferGetFreeElements(const RingBuffer *rb)
{
	return rb->current_elements_amount;
}

/**
 * @brief Limpiar buffer circular
 * @param[in] rb Puntero al buffer circular a limpiar
 */
void RingBufferClear(RingBuffer *rb)
{
	*((unsigned int *) &rb->in_idx) = rb->out_idx;
	*((unsigned int *) &rb->current_elements_amount) = 0;
}
